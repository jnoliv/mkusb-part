#!/usr/bin/env bash

# mkusb-part is a bash utility to create bootable USB sticks with persistence
# and a Windows-compatible storage partition.
#
# Copyright (C) 2023 Jo√£o Nuno Oliveira <joaonunoao@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Credits:
# * The authors of 'sgdisk' for writing such a great tool and accompanying documentation:
#   http://www.rodsbooks.com/gdisk/
# * C. S. Cameron for sending me down the right path with this great 'ask Ubuntu' answer:
#   https://askubuntu.com/a/1284930
# * The Geek Diary for this handy tutorial on loopback devices:
#   https://www.thegeekdiary.com/how-to-create-virtual-block-device-loop-device-filesystem-in-linux/
# * starfall42 on this 'fedora forum' post, for giving me the answer to why changing grub resolution wasn't working:
#   https://forums.fedoraforum.org/showthread.php?321014-Increase-Boot-Menu-Font-Size&p=1838802#post1838802

# TODO v0.3:
# * can the calls to mkfs be more generic to easily support most filesystem types, with the exception of ntfs?
# * test mode which creates a loopback device of given size, prints the device path and exits (-t --test ?) (option to clean up?)
#
# TODO v0.4:
# * add tab completion support?
#
# TODO v0.5:
# * add support for encrypted storage partition
# * add support for creating multi-boot usb
# * allow supplying custom grub configuration file

set -euo pipefail

declare -r VERSION='0.2'

# Exit codes. The values greater than 63, as well as 0, are
# identical to the definitions in '/usr/include/sysexits.h'.
declare -r EX_OK=0          # successful termination
declare -r EX_MOUNTED=1     # device has mounted partitions
declare -r EX_USAGE=64      # command line usage error
declare -r EX_DATAERR=65    # data format error

# GPT partition type GUIDs.
declare -r BIOS='21686148-6449-6E6F-744E-656564454649'
declare -r EFI='C12A7328-F81F-11D2-BA4B-00A0C93EC93B'
declare -r LINUX='0FC63DAF-8483-4772-8E79-3D69D8477DE4'
declare -r MSDATA='EBD0A0A2-B9E5-4433-87C0-68B6B72699C7'

# Number of bytes in a mebibyte.
declare -r MiB=1048576

usage () {
    echo \
"
Usage: $0 [OPTION]... IMAGE DEVICE

Make DEVICE bootable using the operating system in IMAGE with casper persistence and windows compatible storage.

Options:
 -f, --force                attempt to unmount any mounted partitions on the given device
 -i, --input[=FILE]         read partition definition from given file, or stdin if no file given
 -n, --no-storage           do not create a storage partition, using remaining space for persistence
 -p, --persistence=SIZE     the size, in MiB, of the persistence partition (default 4GiB)
 -v, --verbose              show details of operations as they are executed

 -h, --help                 display this help
     --version              display version

  Note: options are parsed using getopt (1), if options are not being parsed as expected try reading man getopt.

Return Values:
  0    normal program execution
  1    device has mounted partitions
 64    incorrect arguments
 65    incorrect data provided

Partition Definition:
  The partition information read from STDIN is expected one per line, in the following format:
   INDEX NAME TYPE FILESYSTEM_TYPE SIZE [FLAG]...
 
  The INDEX is in relation to the partition in the partition table. In the device, partitions will be in the order they
  appear in the list. For example,
   2 part1 ...
   1 part2 ...
  would result in the disk starting with part1 and then part2, but part2 would appear first in the partition table. Note
  it is 1-based.
 
  If NAME contains spaces they must be escaped. It is used for both the partition name and, for ntf or ext* filesystems,
  the filesystem's label.
 
  The TYPE is the partition's GPT partition type GUID.
 
  The valid values of FILESYSTEM_TYPE are none, fat12, fat16, fat32, ntfs, ext2, ext3, and ext4, where none means no
  filesystem will be created in the partition.
 
  A partition's SIZE must be given in IEC-I format (KiB, MiB, GiB...). The last partition can have its SIZE set to 0, in
  which case all remaining space is used.
 
  The optional FLAG list is a space separated list of integers, with valid values between 0 and 63. These correspond to
  the GPT attribute flags to be set for the partition.
"

    exit "$1"
}

main () {
    parse_args "$@"
    validate

    if [ -z "$INPUT" ]; then
        local -r parts=$(default_partitions)
    else
        local -r parts=$(cat $INPUT)
    fi

    echo "$parts" | make_partitions

    local -r boot_index=$(echo "$parts" | grep -m 1 "$EFI" | cut -f1 -d' ')
    local -r root_index=$(echo "$parts" | grep -m 1 "root" | cut -f1 -d' ')

    local -r boot_name="$(get_partition_name "$DISK" "$boot_index")"

    copy_iso_contents "$boot_name" "$(get_partition_name "$DISK" "$root_index")"

    local -r grub_index=$(echo "$parts" | grep -m 1 "$BIOS" | cut -f1 -d' ')
    install_grub "$(get_partition_name "$DISK" "$grub_index")" "$boot_name" "$root_index"
}

parse_args () {
    # Parse and validate command line arguments.
    #  $@ - command line arguments
    #
    # Sets:
    #  DISK
    #  IMAGE
    #  PERSISTENCE_SIZE
    #  VERBOSE

    local -r options="fi::np:vh"
    local -r long="force,input:,no-storage,persistence:,verbose,help,version"

    local args

    # Optional arguments.
    args=$(getopt --name "$0" --options=+"$options" --longoptions="$long" -- $@)
    if [ $? -ne 0 ]; then
        usage "$EX_USAGE"
    fi

    eval set -- "$args"

    while true; do
        case "$1" in
            -h|--help)
                usage "$EX_OK";;
            
            -f|--force)
                local -r force=true
                shift;;

            -i|--input)
                if [[ $2 =~ ^- ]]; then
                    local -r input=/dev/stdin
                else
                    local -r input="$2"
                fi

                shift 2;;

            -n|--no-storage)
                local -r storage=true
                shift;;

            -p|--persistent)
                if ! [[ $2 =~ ^[0-9]+([KMGTPEZY]i)?B$ ]]; then
                    error "optional argument $1 must be succeeded by a valid IEC unit (B, KiB, MiB, GiB...)"
                    usage "$EX_USAGE"
                fi

                local -r persistence_size=$2
                shift 2;;

            -v|--verbose)
                local -r verbose=true
                shift;;
            
            --version)
                echo "$0 v$VERSION"
                exit "$EX_OK";;

            --)
                shift
                break;;
        esac
    done

    declare -gr INPUT="${input:-}"
    declare -gr FORCE="${force:=false}"
    declare -gr STORAGE="${storage:=false}"
    declare -gr PERSISTENCE_SIZE="${persistence_size:=4GiB}"
    declare -gr VERBOSE="${verbose:=false}"

    # Positional arguments.
    if [ -z "$1" ] || ! [ -f "$1" ] || [[ "$1" != *.iso ]]; then
        error "first position argument is missing or is not an iso file"
        usage "$EX_USAGE"
    fi

    if [ -z "$2" ] || ! [ -b "$2" ]; then
        error "second positional argument is missing or is not a block device"
        usage "$EX_USAGE"
    fi

    declare -gr IMAGE=$1
    declare -gr DISK=$2

    info "running $0 with the following options:"
    info " FORCE=$FORCE"
    info " INPUT=$INPUT"
    info " STORAGE=$storage"
    info " PERSISTENCE_SIZE=$PERSISTENCE_SIZE"
    info " VERBOSE=$VERBOSE"
    info " DISK=$DISK"
    info " IMAGE=$IMAGE"
    info ""
}

validate () {
    # Validate that the user requested actions are possible.
    # Uses the following global variables:
    #  $DISK             - the given block device
    #  $FORCE            - attempt to unmount device's mounted partitions
    #  $PERSISTENCE_SIZE - the size of the casper-rw persistence partition

    # Check if any of DISKs partitions are mounted.
    local -r mounted=$(df | grep "$DISK" | cut -d' ' -f1)

    if [ -n "$mounted" ]; then
        if ! $FORCE; then
            error "device $DISK has mounted partitions:\n$mounted"
            usage "$EX_MOUNTED"
        fi

        for p in $mounted; do
            umount "$p"
            info "unmounted $p"
        done

        info ""
    fi
}

default_partitions () {
    # Returns the default configuration of partitions to create in the device.
    # Uses the following global variables:
    #  $PERSISTENCE_SIZE - the size of the casper-rw persistence partition
    #  $STORAGE          - whether to include a storage partition

    # Determine the size of the image, as that dictates the size of root partition.
    # The root partition will be set to 105% of the image's size to account for ext4 filesystem overhead.
    local -r img_size=$(( $(stat --printf="%s" "$IMAGE") * 21/20 / MiB))MiB

    info "partition for OS image will have size $img_size"
    info ""

    local -r no_storage="\
1 BIOS       $BIOS   none  1MiB
2 EFI        $EFI    fat32 300MiB
3 root       $LINUX  ext4  $img_size
4 casper-rw  $LINUX  ext4  0"

    local -r default="\
2 BIOS       $BIOS   none  1MiB
3 EFI        $EFI    fat32 300MiB
4 root       $LINUX  ext4  $img_size
5 casper-rw  $LINUX  ext4  $PERSISTENCE_SIZE
1 USB\ Data  $MSDATA ntfs  0"

    if $STORAGE; then
        echo "$no_storage"
    else
        echo "$default"
    fi
}

make_partitions () {
    # Reads partition information from STDIN and creates the requested partitions
    # and filesystems in the given device. Uses the following global variables:
    #  $DISK - the given block device

    local -r stdin=$(cat)
    info "Creating the following partitions:"
    info "$stdin"
    info ""

    # Delete existing partition table and create new partitions.
    sgdisk -Z "$DISK" > /dev/null

    while read i name type _fs size flags; do
        local new

        # Handle SIZE 0.
        if [ "$size" == "0" ]; then
            new="-N $i"
        else
            # sgdisk takes in sizes suffixed with K, M, G, etc, to mean KiB, MiB, GiB, etc.
            size="${size::-2}"

            new="-n $i:0:+$size"
        fi

        # Handle flags.
        local attribs=""
        if [ -n "$flags" ]; then
            attribs="$(printf -- "-A $i:set:%s " $flags)"
        fi

        sgdisk $new -c "$i":"$name" -t "$i":"$type" $attribs "$DISK" > /dev/null
    done <<< "$stdin"

    # Since partitions can be given in different order than they will appear in the partition
    # table, it's easier to create all partitions and then create all filesystems than trying
    # to figure out the path of each partition as they are created.

    # Create filesystems.
    while read i name _type fs _size _flags; do
        local part
        part="$(get_partition_name "$DISK" "$i")"

        case "$fs" in
            none)
                ;; # Unformatted partition.

            fat*)
                mkfs.fat -F "${fs:3}" -S "$(blockdev --getpbsz "$DISK")" "$part" > /dev/null
                ;;

            ntfs)
                mkntfs --fast -q -L "$name" -p 0 -H 0 -S 0 "$part"
                ;;

            ext*)
                mkfs -t "$fs" -q -L "$name" "$part"
                ;;

            *)
                error "unsupported filesystem $fs"
                exit "$EX_DATAERR"
                ;;
        esac
    done <<< "$stdin"
}

copy_iso_contents () {
    # Copies the contents of the os image to the root partition,
    # and the boot and EFI folders to the boot partition.
    #  $1 - the boot partition name
    #  $2 - the root partition name
    #
    # Uses the following global variables:
    #  $DISK  - the given block device
    #  $IMAGE - the given os image

    local -r boot="$1" root="$2"

    # Mount the boot partition, root partition and the os image.
    mkdir -p /mnt/usb-boot /mnt/usb-root /mnt/iso
    mount "$boot" /mnt/usb-boot
    mount "$root" /mnt/usb-root
    mount -r -o loop "$IMAGE" /mnt/iso

    info "mounted $boot at /mnt/usb-boot, $root at /mnt/usb-root, and $IMAGE at /mnt/iso"

    # Copy the image contents to root partition.
    info "copying $IMAGE contents to $root..."

    cp -a /mnt/iso/. /mnt/usb-root

    info "done"

    # Copy boot and EFI folders from image to boot partition.
    cp -r /mnt/iso/boot /mnt/usb-boot
    cp -r /mnt/iso/EFI  /mnt/usb-boot

    info "copied boot and EFI folders to boot partition"

    # Clean up.
    sync "$root" "$boot"
    umount "$IMAGE"
    umount "$root"
    umount "$boot"

    rm -rf /mnt/iso /mnt/usb-boot /mnt/usb-root

    info "unmounted image and partitions and removed mount points"
    info ""
}

install_grub () {
    # Installs grub on the given partition. The grub config is also modified to set the kernel's
    # persistence flag, and the grub menu's resolution (making it readable in 4k monitors).
    # $1 - the grub partition name
    # $2 - the boot partition name
    # $3 - the index of the root partition in the device

    local -r grub="$1" boot="$2"

    # Mount the boot partition.
    mkdir -p /mnt/usb-boot
    mount "$boot" /mnt/usb-boot

    info "mounted $boot at /mnt/usb-boot"

    # Prepend new settings and add kernel persistence flag.
    local -r grub_config="\
set root=(hd0,$3)

set gfxmode=1280x1024,800x600,auto
terminal_output gfxterm

$(cat /mnt/usb-boot/boot/grub/grub.cfg)"

    echo "$grub_config" > /mnt/usb-boot/boot/grub/grub.cfg

    sed -i "/^\tlinux/ { s/$/persistent/; :a; n; ba; }" /mnt/usb-boot/boot/grub/grub.cfg

    info "modified grub configuration"

    # Install grub.
    grub-install --removable --uefi-secure-boot \
        --boot-directory=/mnt/usb-boot/boot \
        --efi-directory=/mnt/usb-boot/EFI "$grub" \
        &> /dev/null

    info "installed grub to $grub"

    # Clean up.
    sync "$boot"
    umount "$boot"
    rm -rf /mnt/usb-boot

    info "unmounted $boot and removed mount point"
    info ""
}

# Utilities

get_partition_name () {
    # Get partition at the given index on the given device.
    #  $1 - the partition's device
    #  $2 - the index of the partition in the device

    if [[ $1 =~ [0-9]$ ]]; then
        echo "$1"p"$2"
    else
        echo "$1$2"
    fi
}

info () {
    if $VERBOSE; then
        echo -e "$*" > /dev/tty
    fi
}

error () {
    echo -e "$0: $*" > /dev/tty
}

main "$@"
